
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDErightPOWERMODULUSINT REAL STRING NAME LBRACK RBRACK COMMA PLUS MINUS DIVIDE MULTIPLY POWER MODULUS EQUALS\n    calc : expression\n         | var_assign\n         | list_access_assign\n         | empty\n    \n    var_assign : NAME EQUALS expression\n               | NAME EQUALS STRING\n    \n    expression : expression POWER expression\n               | expression MULTIPLY expression\n               | expression DIVIDE expression\n               | expression MODULUS expression\n               | expression PLUS expression\n               | expression MINUS expression\n    \n    expression : INT\n               | REAL\n    \n    expression : NAME\n    \n    empty :\n    \n    arguments : arguments COMMA expression\n              | arguments COMMA STRING\n              | expression\n              | STRING\n              |\n    \n    expression : LBRACK arguments RBRACK\n    \n    expression : NAME LBRACK expression RBRACK\n    \n    list_access_assign : NAME LBRACK expression RBRACK EQUALS expression\n                       | NAME LBRACK expression RBRACK EQUALS STRING\n    '
    
_lr_action_items = {'INT':([0,9,10,11,12,13,14,15,16,17,32,33,38,],[6,6,6,6,6,6,6,6,6,6,6,6,6,]),'REAL':([0,9,10,11,12,13,14,15,16,17,32,33,38,],[7,7,7,7,7,7,7,7,7,7,7,7,7,]),'NAME':([0,9,10,11,12,13,14,15,16,17,32,33,38,],[8,21,21,21,21,21,21,21,21,21,21,21,21,]),'LBRACK':([0,8,9,10,11,12,13,14,15,16,17,21,32,33,38,],[9,16,9,9,9,9,9,9,9,9,9,33,9,9,9,]),'$end':([0,1,2,3,4,5,6,7,8,21,22,23,24,25,26,27,29,30,31,34,39,40,41,],[-16,0,-1,-2,-3,-4,-13,-14,-15,-15,-7,-8,-9,-10,-11,-12,-5,-6,-22,-23,-23,-24,-25,]),'POWER':([2,6,7,8,19,21,22,23,24,25,26,27,28,29,31,34,35,37,39,40,],[10,-13,-14,-15,10,-15,10,10,10,10,10,10,10,10,-22,-23,10,10,-23,10,]),'MULTIPLY':([2,6,7,8,19,21,22,23,24,25,26,27,28,29,31,34,35,37,39,40,],[11,-13,-14,-15,11,-15,-7,-8,-9,-10,11,11,11,11,-22,-23,11,11,-23,11,]),'DIVIDE':([2,6,7,8,19,21,22,23,24,25,26,27,28,29,31,34,35,37,39,40,],[12,-13,-14,-15,12,-15,-7,-8,-9,-10,12,12,12,12,-22,-23,12,12,-23,12,]),'MODULUS':([2,6,7,8,19,21,22,23,24,25,26,27,28,29,31,34,35,37,39,40,],[13,-13,-14,-15,13,-15,13,13,13,13,13,13,13,13,-22,-23,13,13,-23,13,]),'PLUS':([2,6,7,8,19,21,22,23,24,25,26,27,28,29,31,34,35,37,39,40,],[14,-13,-14,-15,14,-15,-7,-8,-9,-10,-11,-12,14,14,-22,-23,14,14,-23,14,]),'MINUS':([2,6,7,8,19,21,22,23,24,25,26,27,28,29,31,34,35,37,39,40,],[15,-13,-14,-15,15,-15,-7,-8,-9,-10,-11,-12,15,15,-22,-23,15,15,-23,15,]),'RBRACK':([6,7,9,18,19,20,21,22,23,24,25,26,27,28,31,35,36,37,39,],[-13,-14,-21,31,-19,-20,-15,-7,-8,-9,-10,-11,-12,34,-22,-17,-18,39,-23,]),'COMMA':([6,7,9,18,19,20,21,22,23,24,25,26,27,31,35,36,39,],[-13,-14,-21,32,-19,-20,-15,-7,-8,-9,-10,-11,-12,-22,-17,-18,-23,]),'EQUALS':([8,34,],[17,38,]),'STRING':([9,17,32,38,],[20,30,36,41,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'calc':([0,],[1,]),'expression':([0,9,10,11,12,13,14,15,16,17,32,33,38,],[2,19,22,23,24,25,26,27,28,29,35,37,40,]),'var_assign':([0,],[3,]),'list_access_assign':([0,],[4,]),'empty':([0,],[5,]),'arguments':([9,],[18,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> calc","S'",1,None,None,None),
  ('calc -> expression','calc',1,'p_calc','parser.py',15),
  ('calc -> var_assign','calc',1,'p_calc','parser.py',16),
  ('calc -> list_access_assign','calc',1,'p_calc','parser.py',17),
  ('calc -> empty','calc',1,'p_calc','parser.py',18),
  ('var_assign -> NAME EQUALS expression','var_assign',3,'p_var_assign','parser.py',24),
  ('var_assign -> NAME EQUALS STRING','var_assign',3,'p_var_assign','parser.py',25),
  ('expression -> expression POWER expression','expression',3,'p_expression','parser.py',31),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','parser.py',32),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','parser.py',33),
  ('expression -> expression MODULUS expression','expression',3,'p_expression','parser.py',34),
  ('expression -> expression PLUS expression','expression',3,'p_expression','parser.py',35),
  ('expression -> expression MINUS expression','expression',3,'p_expression','parser.py',36),
  ('expression -> INT','expression',1,'p_expression_int_float','parser.py',42),
  ('expression -> REAL','expression',1,'p_expression_int_float','parser.py',43),
  ('expression -> NAME','expression',1,'p_expression_var','parser.py',49),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',55),
  ('arguments -> arguments COMMA expression','arguments',3,'p_comma_separated_expr','parser.py',61),
  ('arguments -> arguments COMMA STRING','arguments',3,'p_comma_separated_expr','parser.py',62),
  ('arguments -> expression','arguments',1,'p_comma_separated_expr','parser.py',63),
  ('arguments -> STRING','arguments',1,'p_comma_separated_expr','parser.py',64),
  ('arguments -> <empty>','arguments',0,'p_comma_separated_expr','parser.py',65),
  ('expression -> LBRACK arguments RBRACK','expression',3,'p_list','parser.py',77),
  ('expression -> NAME LBRACK expression RBRACK','expression',4,'p_list_access','parser.py',83),
  ('list_access_assign -> NAME LBRACK expression RBRACK EQUALS expression','list_access_assign',6,'p_list_access_assign','parser.py',89),
  ('list_access_assign -> NAME LBRACK expression RBRACK EQUALS STRING','list_access_assign',6,'p_list_access_assign','parser.py',90),
]
