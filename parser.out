Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    STRING

Grammar

Rule 0     S' -> calc
Rule 1     calc -> expression
Rule 2     calc -> var_assign
Rule 3     calc -> list_access_assign
Rule 4     calc -> empty
Rule 5     var_assign -> NAME EQUALS expression
Rule 6     expression -> expression POWER expression
Rule 7     expression -> expression MULTIPLY expression
Rule 8     expression -> expression DIVIDE expression
Rule 9     expression -> expression MODULUS expression
Rule 10    expression -> expression PLUS expression
Rule 11    expression -> expression MINUS expression
Rule 12    expression -> INT
Rule 13    expression -> REAL
Rule 14    expression -> NAME
Rule 15    empty -> <empty>
Rule 16    arguments -> arguments COMMA expression
Rule 17    arguments -> expression
Rule 18    arguments -> <empty>
Rule 19    expression -> LBRACK arguments RBRACK
Rule 20    expression -> NAME LBRACK expression RBRACK
Rule 21    list_access_assign -> NAME LBRACK expression RBRACK EQUALS expression

Terminals, with rules where they appear

COMMA                : 16
DIVIDE               : 8
EQUALS               : 5 21
INT                  : 12
LBRACK               : 19 20 21
MINUS                : 11
MODULUS              : 9
MULTIPLY             : 7
NAME                 : 5 14 20 21
PLUS                 : 10
POWER                : 6
RBRACK               : 19 20 21
REAL                 : 13
STRING               : 
error                : 

Nonterminals, with rules where they appear

arguments            : 16 19
calc                 : 0
empty                : 4
expression           : 1 5 6 6 7 7 8 8 9 9 10 10 11 11 16 17 20 21 21
list_access_assign   : 3
var_assign           : 2

Parsing method: LALR

state 0

    (0) S' -> . calc
    (1) calc -> . expression
    (2) calc -> . var_assign
    (3) calc -> . list_access_assign
    (4) calc -> . empty
    (6) expression -> . expression POWER expression
    (7) expression -> . expression MULTIPLY expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULUS expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . INT
    (13) expression -> . REAL
    (14) expression -> . NAME
    (19) expression -> . LBRACK arguments RBRACK
    (20) expression -> . NAME LBRACK expression RBRACK
    (5) var_assign -> . NAME EQUALS expression
    (21) list_access_assign -> . NAME LBRACK expression RBRACK EQUALS expression
    (15) empty -> .

    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 8
    LBRACK          shift and go to state 9
    $end            reduce using rule 15 (empty -> .)

    calc                           shift and go to state 1
    expression                     shift and go to state 2
    var_assign                     shift and go to state 3
    list_access_assign             shift and go to state 4
    empty                          shift and go to state 5

state 1

    (0) S' -> calc .



state 2

    (1) calc -> expression .
    (6) expression -> expression . POWER expression
    (7) expression -> expression . MULTIPLY expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULUS expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression

    $end            reduce using rule 1 (calc -> expression .)
    POWER           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12
    MODULUS         shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15


state 3

    (2) calc -> var_assign .

    $end            reduce using rule 2 (calc -> var_assign .)


state 4

    (3) calc -> list_access_assign .

    $end            reduce using rule 3 (calc -> list_access_assign .)


state 5

    (4) calc -> empty .

    $end            reduce using rule 4 (calc -> empty .)


state 6

    (12) expression -> INT .

    POWER           reduce using rule 12 (expression -> INT .)
    MULTIPLY        reduce using rule 12 (expression -> INT .)
    DIVIDE          reduce using rule 12 (expression -> INT .)
    MODULUS         reduce using rule 12 (expression -> INT .)
    PLUS            reduce using rule 12 (expression -> INT .)
    MINUS           reduce using rule 12 (expression -> INT .)
    $end            reduce using rule 12 (expression -> INT .)
    RBRACK          reduce using rule 12 (expression -> INT .)
    COMMA           reduce using rule 12 (expression -> INT .)


state 7

    (13) expression -> REAL .

    POWER           reduce using rule 13 (expression -> REAL .)
    MULTIPLY        reduce using rule 13 (expression -> REAL .)
    DIVIDE          reduce using rule 13 (expression -> REAL .)
    MODULUS         reduce using rule 13 (expression -> REAL .)
    PLUS            reduce using rule 13 (expression -> REAL .)
    MINUS           reduce using rule 13 (expression -> REAL .)
    $end            reduce using rule 13 (expression -> REAL .)
    RBRACK          reduce using rule 13 (expression -> REAL .)
    COMMA           reduce using rule 13 (expression -> REAL .)


state 8

    (14) expression -> NAME .
    (20) expression -> NAME . LBRACK expression RBRACK
    (5) var_assign -> NAME . EQUALS expression
    (21) list_access_assign -> NAME . LBRACK expression RBRACK EQUALS expression

    POWER           reduce using rule 14 (expression -> NAME .)
    MULTIPLY        reduce using rule 14 (expression -> NAME .)
    DIVIDE          reduce using rule 14 (expression -> NAME .)
    MODULUS         reduce using rule 14 (expression -> NAME .)
    PLUS            reduce using rule 14 (expression -> NAME .)
    MINUS           reduce using rule 14 (expression -> NAME .)
    $end            reduce using rule 14 (expression -> NAME .)
    LBRACK          shift and go to state 16
    EQUALS          shift and go to state 17


state 9

    (19) expression -> LBRACK . arguments RBRACK
    (16) arguments -> . arguments COMMA expression
    (17) arguments -> . expression
    (18) arguments -> .
    (6) expression -> . expression POWER expression
    (7) expression -> . expression MULTIPLY expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULUS expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . INT
    (13) expression -> . REAL
    (14) expression -> . NAME
    (19) expression -> . LBRACK arguments RBRACK
    (20) expression -> . NAME LBRACK expression RBRACK

    RBRACK          reduce using rule 18 (arguments -> .)
    COMMA           reduce using rule 18 (arguments -> .)
    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 20
    LBRACK          shift and go to state 9

    arguments                      shift and go to state 18
    expression                     shift and go to state 19

state 10

    (6) expression -> expression POWER . expression
    (6) expression -> . expression POWER expression
    (7) expression -> . expression MULTIPLY expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULUS expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . INT
    (13) expression -> . REAL
    (14) expression -> . NAME
    (19) expression -> . LBRACK arguments RBRACK
    (20) expression -> . NAME LBRACK expression RBRACK

    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 20
    LBRACK          shift and go to state 9

    expression                     shift and go to state 21

state 11

    (7) expression -> expression MULTIPLY . expression
    (6) expression -> . expression POWER expression
    (7) expression -> . expression MULTIPLY expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULUS expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . INT
    (13) expression -> . REAL
    (14) expression -> . NAME
    (19) expression -> . LBRACK arguments RBRACK
    (20) expression -> . NAME LBRACK expression RBRACK

    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 20
    LBRACK          shift and go to state 9

    expression                     shift and go to state 22

state 12

    (8) expression -> expression DIVIDE . expression
    (6) expression -> . expression POWER expression
    (7) expression -> . expression MULTIPLY expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULUS expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . INT
    (13) expression -> . REAL
    (14) expression -> . NAME
    (19) expression -> . LBRACK arguments RBRACK
    (20) expression -> . NAME LBRACK expression RBRACK

    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 20
    LBRACK          shift and go to state 9

    expression                     shift and go to state 23

state 13

    (9) expression -> expression MODULUS . expression
    (6) expression -> . expression POWER expression
    (7) expression -> . expression MULTIPLY expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULUS expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . INT
    (13) expression -> . REAL
    (14) expression -> . NAME
    (19) expression -> . LBRACK arguments RBRACK
    (20) expression -> . NAME LBRACK expression RBRACK

    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 20
    LBRACK          shift and go to state 9

    expression                     shift and go to state 24

state 14

    (10) expression -> expression PLUS . expression
    (6) expression -> . expression POWER expression
    (7) expression -> . expression MULTIPLY expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULUS expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . INT
    (13) expression -> . REAL
    (14) expression -> . NAME
    (19) expression -> . LBRACK arguments RBRACK
    (20) expression -> . NAME LBRACK expression RBRACK

    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 20
    LBRACK          shift and go to state 9

    expression                     shift and go to state 25

state 15

    (11) expression -> expression MINUS . expression
    (6) expression -> . expression POWER expression
    (7) expression -> . expression MULTIPLY expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULUS expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . INT
    (13) expression -> . REAL
    (14) expression -> . NAME
    (19) expression -> . LBRACK arguments RBRACK
    (20) expression -> . NAME LBRACK expression RBRACK

    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 20
    LBRACK          shift and go to state 9

    expression                     shift and go to state 26

state 16

    (20) expression -> NAME LBRACK . expression RBRACK
    (21) list_access_assign -> NAME LBRACK . expression RBRACK EQUALS expression
    (6) expression -> . expression POWER expression
    (7) expression -> . expression MULTIPLY expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULUS expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . INT
    (13) expression -> . REAL
    (14) expression -> . NAME
    (19) expression -> . LBRACK arguments RBRACK
    (20) expression -> . NAME LBRACK expression RBRACK

    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 20
    LBRACK          shift and go to state 9

    expression                     shift and go to state 27

state 17

    (5) var_assign -> NAME EQUALS . expression
    (6) expression -> . expression POWER expression
    (7) expression -> . expression MULTIPLY expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULUS expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . INT
    (13) expression -> . REAL
    (14) expression -> . NAME
    (19) expression -> . LBRACK arguments RBRACK
    (20) expression -> . NAME LBRACK expression RBRACK

    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 20
    LBRACK          shift and go to state 9

    expression                     shift and go to state 28

state 18

    (19) expression -> LBRACK arguments . RBRACK
    (16) arguments -> arguments . COMMA expression

    RBRACK          shift and go to state 29
    COMMA           shift and go to state 30


state 19

    (17) arguments -> expression .
    (6) expression -> expression . POWER expression
    (7) expression -> expression . MULTIPLY expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULUS expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression

    RBRACK          reduce using rule 17 (arguments -> expression .)
    COMMA           reduce using rule 17 (arguments -> expression .)
    POWER           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12
    MODULUS         shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15


state 20

    (14) expression -> NAME .
    (20) expression -> NAME . LBRACK expression RBRACK

    POWER           reduce using rule 14 (expression -> NAME .)
    MULTIPLY        reduce using rule 14 (expression -> NAME .)
    DIVIDE          reduce using rule 14 (expression -> NAME .)
    MODULUS         reduce using rule 14 (expression -> NAME .)
    PLUS            reduce using rule 14 (expression -> NAME .)
    MINUS           reduce using rule 14 (expression -> NAME .)
    RBRACK          reduce using rule 14 (expression -> NAME .)
    COMMA           reduce using rule 14 (expression -> NAME .)
    $end            reduce using rule 14 (expression -> NAME .)
    LBRACK          shift and go to state 31


state 21

    (6) expression -> expression POWER expression .
    (6) expression -> expression . POWER expression
    (7) expression -> expression . MULTIPLY expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULUS expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression

    MULTIPLY        reduce using rule 6 (expression -> expression POWER expression .)
    DIVIDE          reduce using rule 6 (expression -> expression POWER expression .)
    PLUS            reduce using rule 6 (expression -> expression POWER expression .)
    MINUS           reduce using rule 6 (expression -> expression POWER expression .)
    $end            reduce using rule 6 (expression -> expression POWER expression .)
    RBRACK          reduce using rule 6 (expression -> expression POWER expression .)
    COMMA           reduce using rule 6 (expression -> expression POWER expression .)
    POWER           shift and go to state 10
    MODULUS         shift and go to state 13

  ! POWER           [ reduce using rule 6 (expression -> expression POWER expression .) ]
  ! MODULUS         [ reduce using rule 6 (expression -> expression POWER expression .) ]
  ! MULTIPLY        [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]


state 22

    (7) expression -> expression MULTIPLY expression .
    (6) expression -> expression . POWER expression
    (7) expression -> expression . MULTIPLY expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULUS expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression

    MULTIPLY        reduce using rule 7 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 7 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 7 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 7 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 7 (expression -> expression MULTIPLY expression .)
    RBRACK          reduce using rule 7 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 7 (expression -> expression MULTIPLY expression .)
    POWER           shift and go to state 10
    MODULUS         shift and go to state 13

  ! POWER           [ reduce using rule 7 (expression -> expression MULTIPLY expression .) ]
  ! MODULUS         [ reduce using rule 7 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]


state 23

    (8) expression -> expression DIVIDE expression .
    (6) expression -> expression . POWER expression
    (7) expression -> expression . MULTIPLY expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULUS expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression

    MULTIPLY        reduce using rule 8 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 8 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 8 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 8 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 8 (expression -> expression DIVIDE expression .)
    RBRACK          reduce using rule 8 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 8 (expression -> expression DIVIDE expression .)
    POWER           shift and go to state 10
    MODULUS         shift and go to state 13

  ! POWER           [ reduce using rule 8 (expression -> expression DIVIDE expression .) ]
  ! MODULUS         [ reduce using rule 8 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]


state 24

    (9) expression -> expression MODULUS expression .
    (6) expression -> expression . POWER expression
    (7) expression -> expression . MULTIPLY expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULUS expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression

    MULTIPLY        reduce using rule 9 (expression -> expression MODULUS expression .)
    DIVIDE          reduce using rule 9 (expression -> expression MODULUS expression .)
    PLUS            reduce using rule 9 (expression -> expression MODULUS expression .)
    MINUS           reduce using rule 9 (expression -> expression MODULUS expression .)
    $end            reduce using rule 9 (expression -> expression MODULUS expression .)
    RBRACK          reduce using rule 9 (expression -> expression MODULUS expression .)
    COMMA           reduce using rule 9 (expression -> expression MODULUS expression .)
    POWER           shift and go to state 10
    MODULUS         shift and go to state 13

  ! POWER           [ reduce using rule 9 (expression -> expression MODULUS expression .) ]
  ! MODULUS         [ reduce using rule 9 (expression -> expression MODULUS expression .) ]
  ! MULTIPLY        [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]


state 25

    (10) expression -> expression PLUS expression .
    (6) expression -> expression . POWER expression
    (7) expression -> expression . MULTIPLY expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULUS expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression

    PLUS            reduce using rule 10 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 10 (expression -> expression PLUS expression .)
    $end            reduce using rule 10 (expression -> expression PLUS expression .)
    RBRACK          reduce using rule 10 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 10 (expression -> expression PLUS expression .)
    POWER           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12
    MODULUS         shift and go to state 13

  ! POWER           [ reduce using rule 10 (expression -> expression PLUS expression .) ]
  ! MULTIPLY        [ reduce using rule 10 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 10 (expression -> expression PLUS expression .) ]
  ! MODULUS         [ reduce using rule 10 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]


state 26

    (11) expression -> expression MINUS expression .
    (6) expression -> expression . POWER expression
    (7) expression -> expression . MULTIPLY expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULUS expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression

    PLUS            reduce using rule 11 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 11 (expression -> expression MINUS expression .)
    $end            reduce using rule 11 (expression -> expression MINUS expression .)
    RBRACK          reduce using rule 11 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 11 (expression -> expression MINUS expression .)
    POWER           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12
    MODULUS         shift and go to state 13

  ! POWER           [ reduce using rule 11 (expression -> expression MINUS expression .) ]
  ! MULTIPLY        [ reduce using rule 11 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 11 (expression -> expression MINUS expression .) ]
  ! MODULUS         [ reduce using rule 11 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]


state 27

    (20) expression -> NAME LBRACK expression . RBRACK
    (21) list_access_assign -> NAME LBRACK expression . RBRACK EQUALS expression
    (6) expression -> expression . POWER expression
    (7) expression -> expression . MULTIPLY expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULUS expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression

    RBRACK          shift and go to state 32
    POWER           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12
    MODULUS         shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15


state 28

    (5) var_assign -> NAME EQUALS expression .
    (6) expression -> expression . POWER expression
    (7) expression -> expression . MULTIPLY expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULUS expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression

    $end            reduce using rule 5 (var_assign -> NAME EQUALS expression .)
    POWER           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12
    MODULUS         shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15


state 29

    (19) expression -> LBRACK arguments RBRACK .

    POWER           reduce using rule 19 (expression -> LBRACK arguments RBRACK .)
    MULTIPLY        reduce using rule 19 (expression -> LBRACK arguments RBRACK .)
    DIVIDE          reduce using rule 19 (expression -> LBRACK arguments RBRACK .)
    MODULUS         reduce using rule 19 (expression -> LBRACK arguments RBRACK .)
    PLUS            reduce using rule 19 (expression -> LBRACK arguments RBRACK .)
    MINUS           reduce using rule 19 (expression -> LBRACK arguments RBRACK .)
    $end            reduce using rule 19 (expression -> LBRACK arguments RBRACK .)
    RBRACK          reduce using rule 19 (expression -> LBRACK arguments RBRACK .)
    COMMA           reduce using rule 19 (expression -> LBRACK arguments RBRACK .)


state 30

    (16) arguments -> arguments COMMA . expression
    (6) expression -> . expression POWER expression
    (7) expression -> . expression MULTIPLY expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULUS expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . INT
    (13) expression -> . REAL
    (14) expression -> . NAME
    (19) expression -> . LBRACK arguments RBRACK
    (20) expression -> . NAME LBRACK expression RBRACK

    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 20
    LBRACK          shift and go to state 9

    expression                     shift and go to state 33

state 31

    (20) expression -> NAME LBRACK . expression RBRACK
    (6) expression -> . expression POWER expression
    (7) expression -> . expression MULTIPLY expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULUS expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . INT
    (13) expression -> . REAL
    (14) expression -> . NAME
    (19) expression -> . LBRACK arguments RBRACK
    (20) expression -> . NAME LBRACK expression RBRACK

    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 20
    LBRACK          shift and go to state 9

    expression                     shift and go to state 34

state 32

    (20) expression -> NAME LBRACK expression RBRACK .
    (21) list_access_assign -> NAME LBRACK expression RBRACK . EQUALS expression

    POWER           reduce using rule 20 (expression -> NAME LBRACK expression RBRACK .)
    MULTIPLY        reduce using rule 20 (expression -> NAME LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 20 (expression -> NAME LBRACK expression RBRACK .)
    MODULUS         reduce using rule 20 (expression -> NAME LBRACK expression RBRACK .)
    PLUS            reduce using rule 20 (expression -> NAME LBRACK expression RBRACK .)
    MINUS           reduce using rule 20 (expression -> NAME LBRACK expression RBRACK .)
    $end            reduce using rule 20 (expression -> NAME LBRACK expression RBRACK .)
    EQUALS          shift and go to state 35


state 33

    (16) arguments -> arguments COMMA expression .
    (6) expression -> expression . POWER expression
    (7) expression -> expression . MULTIPLY expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULUS expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression

    RBRACK          reduce using rule 16 (arguments -> arguments COMMA expression .)
    COMMA           reduce using rule 16 (arguments -> arguments COMMA expression .)
    POWER           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12
    MODULUS         shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15


state 34

    (20) expression -> NAME LBRACK expression . RBRACK
    (6) expression -> expression . POWER expression
    (7) expression -> expression . MULTIPLY expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULUS expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression

    RBRACK          shift and go to state 36
    POWER           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12
    MODULUS         shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15


state 35

    (21) list_access_assign -> NAME LBRACK expression RBRACK EQUALS . expression
    (6) expression -> . expression POWER expression
    (7) expression -> . expression MULTIPLY expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULUS expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression
    (12) expression -> . INT
    (13) expression -> . REAL
    (14) expression -> . NAME
    (19) expression -> . LBRACK arguments RBRACK
    (20) expression -> . NAME LBRACK expression RBRACK

    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 20
    LBRACK          shift and go to state 9

    expression                     shift and go to state 37

state 36

    (20) expression -> NAME LBRACK expression RBRACK .

    POWER           reduce using rule 20 (expression -> NAME LBRACK expression RBRACK .)
    MULTIPLY        reduce using rule 20 (expression -> NAME LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 20 (expression -> NAME LBRACK expression RBRACK .)
    MODULUS         reduce using rule 20 (expression -> NAME LBRACK expression RBRACK .)
    PLUS            reduce using rule 20 (expression -> NAME LBRACK expression RBRACK .)
    MINUS           reduce using rule 20 (expression -> NAME LBRACK expression RBRACK .)
    RBRACK          reduce using rule 20 (expression -> NAME LBRACK expression RBRACK .)
    COMMA           reduce using rule 20 (expression -> NAME LBRACK expression RBRACK .)
    $end            reduce using rule 20 (expression -> NAME LBRACK expression RBRACK .)


state 37

    (21) list_access_assign -> NAME LBRACK expression RBRACK EQUALS expression .
    (6) expression -> expression . POWER expression
    (7) expression -> expression . MULTIPLY expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULUS expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression

    $end            reduce using rule 21 (list_access_assign -> NAME LBRACK expression RBRACK EQUALS expression .)
    POWER           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12
    MODULUS         shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15

