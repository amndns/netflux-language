Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> calc
Rule 1     calc -> expression
Rule 2     calc -> var_assign
Rule 3     calc -> list_access_assign
Rule 4     calc -> empty
Rule 5     var_assign -> NAME EQUALS expression
Rule 6     var_assign -> NAME EQUALS STRING
Rule 7     expression -> expression POWER expression
Rule 8     expression -> expression MULTIPLY expression
Rule 9     expression -> expression DIVIDE expression
Rule 10    expression -> expression MODULUS expression
Rule 11    expression -> expression PLUS expression
Rule 12    expression -> expression MINUS expression
Rule 13    expression -> INT
Rule 14    expression -> REAL
Rule 15    expression -> NAME
Rule 16    empty -> <empty>
Rule 17    arguments -> arguments COMMA expression
Rule 18    arguments -> arguments COMMA STRING
Rule 19    arguments -> expression
Rule 20    arguments -> STRING
Rule 21    arguments -> <empty>
Rule 22    expression -> LBRACK arguments RBRACK
Rule 23    expression -> NAME LBRACK expression RBRACK
Rule 24    list_access_assign -> NAME LBRACK expression RBRACK EQUALS expression
Rule 25    list_access_assign -> NAME LBRACK expression RBRACK EQUALS STRING

Terminals, with rules where they appear

COMMA                : 17 18
DIVIDE               : 9
EQUALS               : 5 6 24 25
INT                  : 13
LBRACK               : 22 23 24 25
MINUS                : 12
MODULUS              : 10
MULTIPLY             : 8
NAME                 : 5 6 15 23 24 25
PLUS                 : 11
POWER                : 7
RBRACK               : 22 23 24 25
REAL                 : 14
STRING               : 6 18 20 25
error                : 

Nonterminals, with rules where they appear

arguments            : 17 18 22
calc                 : 0
empty                : 4
expression           : 1 5 7 7 8 8 9 9 10 10 11 11 12 12 17 19 23 24 24 25
list_access_assign   : 3
var_assign           : 2

Parsing method: LALR

state 0

    (0) S' -> . calc
    (1) calc -> . expression
    (2) calc -> . var_assign
    (3) calc -> . list_access_assign
    (4) calc -> . empty
    (7) expression -> . expression POWER expression
    (8) expression -> . expression MULTIPLY expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression MODULUS expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . INT
    (14) expression -> . REAL
    (15) expression -> . NAME
    (22) expression -> . LBRACK arguments RBRACK
    (23) expression -> . NAME LBRACK expression RBRACK
    (5) var_assign -> . NAME EQUALS expression
    (6) var_assign -> . NAME EQUALS STRING
    (24) list_access_assign -> . NAME LBRACK expression RBRACK EQUALS expression
    (25) list_access_assign -> . NAME LBRACK expression RBRACK EQUALS STRING
    (16) empty -> .

    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 8
    LBRACK          shift and go to state 9
    $end            reduce using rule 16 (empty -> .)

    calc                           shift and go to state 1
    expression                     shift and go to state 2
    var_assign                     shift and go to state 3
    list_access_assign             shift and go to state 4
    empty                          shift and go to state 5

state 1

    (0) S' -> calc .



state 2

    (1) calc -> expression .
    (7) expression -> expression . POWER expression
    (8) expression -> expression . MULTIPLY expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . MODULUS expression
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression

    $end            reduce using rule 1 (calc -> expression .)
    POWER           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12
    MODULUS         shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15


state 3

    (2) calc -> var_assign .

    $end            reduce using rule 2 (calc -> var_assign .)


state 4

    (3) calc -> list_access_assign .

    $end            reduce using rule 3 (calc -> list_access_assign .)


state 5

    (4) calc -> empty .

    $end            reduce using rule 4 (calc -> empty .)


state 6

    (13) expression -> INT .

    POWER           reduce using rule 13 (expression -> INT .)
    MULTIPLY        reduce using rule 13 (expression -> INT .)
    DIVIDE          reduce using rule 13 (expression -> INT .)
    MODULUS         reduce using rule 13 (expression -> INT .)
    PLUS            reduce using rule 13 (expression -> INT .)
    MINUS           reduce using rule 13 (expression -> INT .)
    $end            reduce using rule 13 (expression -> INT .)
    RBRACK          reduce using rule 13 (expression -> INT .)
    COMMA           reduce using rule 13 (expression -> INT .)


state 7

    (14) expression -> REAL .

    POWER           reduce using rule 14 (expression -> REAL .)
    MULTIPLY        reduce using rule 14 (expression -> REAL .)
    DIVIDE          reduce using rule 14 (expression -> REAL .)
    MODULUS         reduce using rule 14 (expression -> REAL .)
    PLUS            reduce using rule 14 (expression -> REAL .)
    MINUS           reduce using rule 14 (expression -> REAL .)
    $end            reduce using rule 14 (expression -> REAL .)
    RBRACK          reduce using rule 14 (expression -> REAL .)
    COMMA           reduce using rule 14 (expression -> REAL .)


state 8

    (15) expression -> NAME .
    (23) expression -> NAME . LBRACK expression RBRACK
    (5) var_assign -> NAME . EQUALS expression
    (6) var_assign -> NAME . EQUALS STRING
    (24) list_access_assign -> NAME . LBRACK expression RBRACK EQUALS expression
    (25) list_access_assign -> NAME . LBRACK expression RBRACK EQUALS STRING

    POWER           reduce using rule 15 (expression -> NAME .)
    MULTIPLY        reduce using rule 15 (expression -> NAME .)
    DIVIDE          reduce using rule 15 (expression -> NAME .)
    MODULUS         reduce using rule 15 (expression -> NAME .)
    PLUS            reduce using rule 15 (expression -> NAME .)
    MINUS           reduce using rule 15 (expression -> NAME .)
    $end            reduce using rule 15 (expression -> NAME .)
    LBRACK          shift and go to state 16
    EQUALS          shift and go to state 17


state 9

    (22) expression -> LBRACK . arguments RBRACK
    (17) arguments -> . arguments COMMA expression
    (18) arguments -> . arguments COMMA STRING
    (19) arguments -> . expression
    (20) arguments -> . STRING
    (21) arguments -> .
    (7) expression -> . expression POWER expression
    (8) expression -> . expression MULTIPLY expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression MODULUS expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . INT
    (14) expression -> . REAL
    (15) expression -> . NAME
    (22) expression -> . LBRACK arguments RBRACK
    (23) expression -> . NAME LBRACK expression RBRACK

    STRING          shift and go to state 20
    RBRACK          reduce using rule 21 (arguments -> .)
    COMMA           reduce using rule 21 (arguments -> .)
    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 21
    LBRACK          shift and go to state 9

    arguments                      shift and go to state 18
    expression                     shift and go to state 19

state 10

    (7) expression -> expression POWER . expression
    (7) expression -> . expression POWER expression
    (8) expression -> . expression MULTIPLY expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression MODULUS expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . INT
    (14) expression -> . REAL
    (15) expression -> . NAME
    (22) expression -> . LBRACK arguments RBRACK
    (23) expression -> . NAME LBRACK expression RBRACK

    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 21
    LBRACK          shift and go to state 9

    expression                     shift and go to state 22

state 11

    (8) expression -> expression MULTIPLY . expression
    (7) expression -> . expression POWER expression
    (8) expression -> . expression MULTIPLY expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression MODULUS expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . INT
    (14) expression -> . REAL
    (15) expression -> . NAME
    (22) expression -> . LBRACK arguments RBRACK
    (23) expression -> . NAME LBRACK expression RBRACK

    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 21
    LBRACK          shift and go to state 9

    expression                     shift and go to state 23

state 12

    (9) expression -> expression DIVIDE . expression
    (7) expression -> . expression POWER expression
    (8) expression -> . expression MULTIPLY expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression MODULUS expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . INT
    (14) expression -> . REAL
    (15) expression -> . NAME
    (22) expression -> . LBRACK arguments RBRACK
    (23) expression -> . NAME LBRACK expression RBRACK

    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 21
    LBRACK          shift and go to state 9

    expression                     shift and go to state 24

state 13

    (10) expression -> expression MODULUS . expression
    (7) expression -> . expression POWER expression
    (8) expression -> . expression MULTIPLY expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression MODULUS expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . INT
    (14) expression -> . REAL
    (15) expression -> . NAME
    (22) expression -> . LBRACK arguments RBRACK
    (23) expression -> . NAME LBRACK expression RBRACK

    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 21
    LBRACK          shift and go to state 9

    expression                     shift and go to state 25

state 14

    (11) expression -> expression PLUS . expression
    (7) expression -> . expression POWER expression
    (8) expression -> . expression MULTIPLY expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression MODULUS expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . INT
    (14) expression -> . REAL
    (15) expression -> . NAME
    (22) expression -> . LBRACK arguments RBRACK
    (23) expression -> . NAME LBRACK expression RBRACK

    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 21
    LBRACK          shift and go to state 9

    expression                     shift and go to state 26

state 15

    (12) expression -> expression MINUS . expression
    (7) expression -> . expression POWER expression
    (8) expression -> . expression MULTIPLY expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression MODULUS expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . INT
    (14) expression -> . REAL
    (15) expression -> . NAME
    (22) expression -> . LBRACK arguments RBRACK
    (23) expression -> . NAME LBRACK expression RBRACK

    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 21
    LBRACK          shift and go to state 9

    expression                     shift and go to state 27

state 16

    (23) expression -> NAME LBRACK . expression RBRACK
    (24) list_access_assign -> NAME LBRACK . expression RBRACK EQUALS expression
    (25) list_access_assign -> NAME LBRACK . expression RBRACK EQUALS STRING
    (7) expression -> . expression POWER expression
    (8) expression -> . expression MULTIPLY expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression MODULUS expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . INT
    (14) expression -> . REAL
    (15) expression -> . NAME
    (22) expression -> . LBRACK arguments RBRACK
    (23) expression -> . NAME LBRACK expression RBRACK

    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 21
    LBRACK          shift and go to state 9

    expression                     shift and go to state 28

state 17

    (5) var_assign -> NAME EQUALS . expression
    (6) var_assign -> NAME EQUALS . STRING
    (7) expression -> . expression POWER expression
    (8) expression -> . expression MULTIPLY expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression MODULUS expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . INT
    (14) expression -> . REAL
    (15) expression -> . NAME
    (22) expression -> . LBRACK arguments RBRACK
    (23) expression -> . NAME LBRACK expression RBRACK

    STRING          shift and go to state 30
    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 21
    LBRACK          shift and go to state 9

    expression                     shift and go to state 29

state 18

    (22) expression -> LBRACK arguments . RBRACK
    (17) arguments -> arguments . COMMA expression
    (18) arguments -> arguments . COMMA STRING

    RBRACK          shift and go to state 31
    COMMA           shift and go to state 32


state 19

    (19) arguments -> expression .
    (7) expression -> expression . POWER expression
    (8) expression -> expression . MULTIPLY expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . MODULUS expression
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression

    RBRACK          reduce using rule 19 (arguments -> expression .)
    COMMA           reduce using rule 19 (arguments -> expression .)
    POWER           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12
    MODULUS         shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15


state 20

    (20) arguments -> STRING .

    RBRACK          reduce using rule 20 (arguments -> STRING .)
    COMMA           reduce using rule 20 (arguments -> STRING .)


state 21

    (15) expression -> NAME .
    (23) expression -> NAME . LBRACK expression RBRACK

    POWER           reduce using rule 15 (expression -> NAME .)
    MULTIPLY        reduce using rule 15 (expression -> NAME .)
    DIVIDE          reduce using rule 15 (expression -> NAME .)
    MODULUS         reduce using rule 15 (expression -> NAME .)
    PLUS            reduce using rule 15 (expression -> NAME .)
    MINUS           reduce using rule 15 (expression -> NAME .)
    RBRACK          reduce using rule 15 (expression -> NAME .)
    COMMA           reduce using rule 15 (expression -> NAME .)
    $end            reduce using rule 15 (expression -> NAME .)
    LBRACK          shift and go to state 33


state 22

    (7) expression -> expression POWER expression .
    (7) expression -> expression . POWER expression
    (8) expression -> expression . MULTIPLY expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . MODULUS expression
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression

    MULTIPLY        reduce using rule 7 (expression -> expression POWER expression .)
    DIVIDE          reduce using rule 7 (expression -> expression POWER expression .)
    PLUS            reduce using rule 7 (expression -> expression POWER expression .)
    MINUS           reduce using rule 7 (expression -> expression POWER expression .)
    $end            reduce using rule 7 (expression -> expression POWER expression .)
    RBRACK          reduce using rule 7 (expression -> expression POWER expression .)
    COMMA           reduce using rule 7 (expression -> expression POWER expression .)
    POWER           shift and go to state 10
    MODULUS         shift and go to state 13

  ! POWER           [ reduce using rule 7 (expression -> expression POWER expression .) ]
  ! MODULUS         [ reduce using rule 7 (expression -> expression POWER expression .) ]
  ! MULTIPLY        [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]


state 23

    (8) expression -> expression MULTIPLY expression .
    (7) expression -> expression . POWER expression
    (8) expression -> expression . MULTIPLY expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . MODULUS expression
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression

    MULTIPLY        reduce using rule 8 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 8 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 8 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 8 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 8 (expression -> expression MULTIPLY expression .)
    RBRACK          reduce using rule 8 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 8 (expression -> expression MULTIPLY expression .)
    POWER           shift and go to state 10
    MODULUS         shift and go to state 13

  ! POWER           [ reduce using rule 8 (expression -> expression MULTIPLY expression .) ]
  ! MODULUS         [ reduce using rule 8 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]


state 24

    (9) expression -> expression DIVIDE expression .
    (7) expression -> expression . POWER expression
    (8) expression -> expression . MULTIPLY expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . MODULUS expression
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression

    MULTIPLY        reduce using rule 9 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 9 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 9 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 9 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 9 (expression -> expression DIVIDE expression .)
    RBRACK          reduce using rule 9 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 9 (expression -> expression DIVIDE expression .)
    POWER           shift and go to state 10
    MODULUS         shift and go to state 13

  ! POWER           [ reduce using rule 9 (expression -> expression DIVIDE expression .) ]
  ! MODULUS         [ reduce using rule 9 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]


state 25

    (10) expression -> expression MODULUS expression .
    (7) expression -> expression . POWER expression
    (8) expression -> expression . MULTIPLY expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . MODULUS expression
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression

    MULTIPLY        reduce using rule 10 (expression -> expression MODULUS expression .)
    DIVIDE          reduce using rule 10 (expression -> expression MODULUS expression .)
    PLUS            reduce using rule 10 (expression -> expression MODULUS expression .)
    MINUS           reduce using rule 10 (expression -> expression MODULUS expression .)
    $end            reduce using rule 10 (expression -> expression MODULUS expression .)
    RBRACK          reduce using rule 10 (expression -> expression MODULUS expression .)
    COMMA           reduce using rule 10 (expression -> expression MODULUS expression .)
    POWER           shift and go to state 10
    MODULUS         shift and go to state 13

  ! POWER           [ reduce using rule 10 (expression -> expression MODULUS expression .) ]
  ! MODULUS         [ reduce using rule 10 (expression -> expression MODULUS expression .) ]
  ! MULTIPLY        [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]


state 26

    (11) expression -> expression PLUS expression .
    (7) expression -> expression . POWER expression
    (8) expression -> expression . MULTIPLY expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . MODULUS expression
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression

    PLUS            reduce using rule 11 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 11 (expression -> expression PLUS expression .)
    $end            reduce using rule 11 (expression -> expression PLUS expression .)
    RBRACK          reduce using rule 11 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 11 (expression -> expression PLUS expression .)
    POWER           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12
    MODULUS         shift and go to state 13

  ! POWER           [ reduce using rule 11 (expression -> expression PLUS expression .) ]
  ! MULTIPLY        [ reduce using rule 11 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 11 (expression -> expression PLUS expression .) ]
  ! MODULUS         [ reduce using rule 11 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]


state 27

    (12) expression -> expression MINUS expression .
    (7) expression -> expression . POWER expression
    (8) expression -> expression . MULTIPLY expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . MODULUS expression
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression

    PLUS            reduce using rule 12 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 12 (expression -> expression MINUS expression .)
    $end            reduce using rule 12 (expression -> expression MINUS expression .)
    RBRACK          reduce using rule 12 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 12 (expression -> expression MINUS expression .)
    POWER           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12
    MODULUS         shift and go to state 13

  ! POWER           [ reduce using rule 12 (expression -> expression MINUS expression .) ]
  ! MULTIPLY        [ reduce using rule 12 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 12 (expression -> expression MINUS expression .) ]
  ! MODULUS         [ reduce using rule 12 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 14 ]
  ! MINUS           [ shift and go to state 15 ]


state 28

    (23) expression -> NAME LBRACK expression . RBRACK
    (24) list_access_assign -> NAME LBRACK expression . RBRACK EQUALS expression
    (25) list_access_assign -> NAME LBRACK expression . RBRACK EQUALS STRING
    (7) expression -> expression . POWER expression
    (8) expression -> expression . MULTIPLY expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . MODULUS expression
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression

    RBRACK          shift and go to state 34
    POWER           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12
    MODULUS         shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15


state 29

    (5) var_assign -> NAME EQUALS expression .
    (7) expression -> expression . POWER expression
    (8) expression -> expression . MULTIPLY expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . MODULUS expression
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression

    $end            reduce using rule 5 (var_assign -> NAME EQUALS expression .)
    POWER           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12
    MODULUS         shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15


state 30

    (6) var_assign -> NAME EQUALS STRING .

    $end            reduce using rule 6 (var_assign -> NAME EQUALS STRING .)


state 31

    (22) expression -> LBRACK arguments RBRACK .

    POWER           reduce using rule 22 (expression -> LBRACK arguments RBRACK .)
    MULTIPLY        reduce using rule 22 (expression -> LBRACK arguments RBRACK .)
    DIVIDE          reduce using rule 22 (expression -> LBRACK arguments RBRACK .)
    MODULUS         reduce using rule 22 (expression -> LBRACK arguments RBRACK .)
    PLUS            reduce using rule 22 (expression -> LBRACK arguments RBRACK .)
    MINUS           reduce using rule 22 (expression -> LBRACK arguments RBRACK .)
    $end            reduce using rule 22 (expression -> LBRACK arguments RBRACK .)
    RBRACK          reduce using rule 22 (expression -> LBRACK arguments RBRACK .)
    COMMA           reduce using rule 22 (expression -> LBRACK arguments RBRACK .)


state 32

    (17) arguments -> arguments COMMA . expression
    (18) arguments -> arguments COMMA . STRING
    (7) expression -> . expression POWER expression
    (8) expression -> . expression MULTIPLY expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression MODULUS expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . INT
    (14) expression -> . REAL
    (15) expression -> . NAME
    (22) expression -> . LBRACK arguments RBRACK
    (23) expression -> . NAME LBRACK expression RBRACK

    STRING          shift and go to state 36
    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 21
    LBRACK          shift and go to state 9

    expression                     shift and go to state 35

state 33

    (23) expression -> NAME LBRACK . expression RBRACK
    (7) expression -> . expression POWER expression
    (8) expression -> . expression MULTIPLY expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression MODULUS expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . INT
    (14) expression -> . REAL
    (15) expression -> . NAME
    (22) expression -> . LBRACK arguments RBRACK
    (23) expression -> . NAME LBRACK expression RBRACK

    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 21
    LBRACK          shift and go to state 9

    expression                     shift and go to state 37

state 34

    (23) expression -> NAME LBRACK expression RBRACK .
    (24) list_access_assign -> NAME LBRACK expression RBRACK . EQUALS expression
    (25) list_access_assign -> NAME LBRACK expression RBRACK . EQUALS STRING

    POWER           reduce using rule 23 (expression -> NAME LBRACK expression RBRACK .)
    MULTIPLY        reduce using rule 23 (expression -> NAME LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 23 (expression -> NAME LBRACK expression RBRACK .)
    MODULUS         reduce using rule 23 (expression -> NAME LBRACK expression RBRACK .)
    PLUS            reduce using rule 23 (expression -> NAME LBRACK expression RBRACK .)
    MINUS           reduce using rule 23 (expression -> NAME LBRACK expression RBRACK .)
    $end            reduce using rule 23 (expression -> NAME LBRACK expression RBRACK .)
    EQUALS          shift and go to state 38


state 35

    (17) arguments -> arguments COMMA expression .
    (7) expression -> expression . POWER expression
    (8) expression -> expression . MULTIPLY expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . MODULUS expression
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression

    RBRACK          reduce using rule 17 (arguments -> arguments COMMA expression .)
    COMMA           reduce using rule 17 (arguments -> arguments COMMA expression .)
    POWER           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12
    MODULUS         shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15


state 36

    (18) arguments -> arguments COMMA STRING .

    RBRACK          reduce using rule 18 (arguments -> arguments COMMA STRING .)
    COMMA           reduce using rule 18 (arguments -> arguments COMMA STRING .)


state 37

    (23) expression -> NAME LBRACK expression . RBRACK
    (7) expression -> expression . POWER expression
    (8) expression -> expression . MULTIPLY expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . MODULUS expression
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression

    RBRACK          shift and go to state 39
    POWER           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12
    MODULUS         shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15


state 38

    (24) list_access_assign -> NAME LBRACK expression RBRACK EQUALS . expression
    (25) list_access_assign -> NAME LBRACK expression RBRACK EQUALS . STRING
    (7) expression -> . expression POWER expression
    (8) expression -> . expression MULTIPLY expression
    (9) expression -> . expression DIVIDE expression
    (10) expression -> . expression MODULUS expression
    (11) expression -> . expression PLUS expression
    (12) expression -> . expression MINUS expression
    (13) expression -> . INT
    (14) expression -> . REAL
    (15) expression -> . NAME
    (22) expression -> . LBRACK arguments RBRACK
    (23) expression -> . NAME LBRACK expression RBRACK

    STRING          shift and go to state 41
    INT             shift and go to state 6
    REAL            shift and go to state 7
    NAME            shift and go to state 21
    LBRACK          shift and go to state 9

    expression                     shift and go to state 40

state 39

    (23) expression -> NAME LBRACK expression RBRACK .

    POWER           reduce using rule 23 (expression -> NAME LBRACK expression RBRACK .)
    MULTIPLY        reduce using rule 23 (expression -> NAME LBRACK expression RBRACK .)
    DIVIDE          reduce using rule 23 (expression -> NAME LBRACK expression RBRACK .)
    MODULUS         reduce using rule 23 (expression -> NAME LBRACK expression RBRACK .)
    PLUS            reduce using rule 23 (expression -> NAME LBRACK expression RBRACK .)
    MINUS           reduce using rule 23 (expression -> NAME LBRACK expression RBRACK .)
    RBRACK          reduce using rule 23 (expression -> NAME LBRACK expression RBRACK .)
    COMMA           reduce using rule 23 (expression -> NAME LBRACK expression RBRACK .)
    $end            reduce using rule 23 (expression -> NAME LBRACK expression RBRACK .)


state 40

    (24) list_access_assign -> NAME LBRACK expression RBRACK EQUALS expression .
    (7) expression -> expression . POWER expression
    (8) expression -> expression . MULTIPLY expression
    (9) expression -> expression . DIVIDE expression
    (10) expression -> expression . MODULUS expression
    (11) expression -> expression . PLUS expression
    (12) expression -> expression . MINUS expression

    $end            reduce using rule 24 (list_access_assign -> NAME LBRACK expression RBRACK EQUALS expression .)
    POWER           shift and go to state 10
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12
    MODULUS         shift and go to state 13
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15


state 41

    (25) list_access_assign -> NAME LBRACK expression RBRACK EQUALS STRING .

    $end            reduce using rule 25 (list_access_assign -> NAME LBRACK expression RBRACK EQUALS STRING .)

